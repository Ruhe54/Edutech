# -*- coding: utf-8 -*-
"""notebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gT_o29khgDO3LcOsldCdaeDxwm6KtW8K

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Edutech

- Nama: Dicky Ary Setiawan
- Email:
- Id Dicoding:

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE
from collections import Counter
import pickle
import joblib

"""### Menyiapkan data yang akan diguankan"""

df = pd.read_csv('https://raw.githubusercontent.com/dicodingacademy/dicoding_dataset/refs/heads/main/employee/employee_data.csv')
df.head()

"""## Data Understanding"""

df.info()

df.describe()

df.isna().sum()

print(df.Attrition.value_counts())
df.Attrition.value_counts().plot(kind='bar', rot=0)

df.Attrition.fillna(False, inplace=True)
df.Attrition = df.Attrition.replace({False:'0'})
df.Attrition.value_counts()

df.select_dtypes(include='object').nunique()

df.columns

# column = df.loc[:, df.columns != 'EmployeeId', 'DailyRate', 'EmployeeCount', 'MonthlyIncome', 'MonthlyRate', 'Over18', 'StandardHours']
column = df[df.columns.drop(['EmployeeId', 'DailyRate', 'EmployeeCount', 'MonthlyIncome', 'MonthlyRate', 'Over18', 'StandardHours', 'HourlyRate'])]
for i in column:
  plt.figure(figsize=(20,5))
  df[i].value_counts().plot(kind='bar', rot=0, ylabel='count')
  plt.show()

num_features = df.select_dtypes(include=[np.number])

plt.figure(figsize=(18, 10))
correlation_matrix = num_features.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Heatmap Korelasi')
plt.show()

"""# **Insight yang didapatkan **

1.Pegawai yang bekerja pada perusahaan ini didominasi usia umur 30 sampai 40 tahun

2.Kebanyakan Karyawan yang berkerja jarang melakukan travel

3.Perusahaan ini didominasi oleh department Research & Development

4.Karyawan yang bekerja pada perusahaan ini mayoritas mengatakan worklifebalance sangat baik

## Data Preparation / Preprocessing
"""

label_encoder = LabelEncoder()
df.select_dtypes(include='object').nunique()

df.Attrition = df.Attrition.astype(int)

for i in df.select_dtypes(include='object'):
  df[i] = label_encoder.fit_transform(df[i]).astype(float)

num_features = df.select_dtypes(include=[np.number])

plt.figure(figsize=(18, 10))
correlation_matrix = num_features.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Heatmap Korelasi')
plt.show()

"""## Modeling"""

result = []

# Buat instance MinMaxScaler
scaler = MinMaxScaler()

# Normalisasi semua kolom numerik
numeric_columns = df.select_dtypes(include=['int64', 'float64']).columns
df[numeric_columns] = scaler.fit_transform(df[numeric_columns])

# Pisahkan fitur (X) dan target (y)
X = df.drop(columns=['Attrition'])
y = df['Attrition']

smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)

print("Distribusi setelah SMOTE:", Counter(y_resampled))

# Split data menjadi set pelatihan dan set uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

# Tampilkan bentuk set pelatihan dan set uji untuk memastikan split
print(f"Training set shape: X_train={X_train.shape}, y_train={y_train.shape}")
print(f"Test set shape: X_test={X_test.shape}, y_test={y_test.shape}")

rf = RandomForestClassifier().fit(X_train, y_train)

# Random Forest
y_pred_rf = rf.predict(X_test)
xgb = confusion_matrix(y_test, y_pred_rf)
tn, fp, fn, tp = xgb.ravel()
print("==== Random Forest Classifier ====")
print("Confusion Matrix:")
print(xgb)
print(f"True Positive (TP): {tp}")
print(f"False Positive (FP): {fp}")
print(f"False Negative (FN): {fn}")
print(f"True Negative (TN): {tn}")

plt.figure(figsize=(5, 4))
sns.heatmap(xgb, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('XGBClassifier Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

result.append({
    'Model': 'Random Forest Classifier',
    'Accuracy': accuracy_score(y_test, y_pred_rf),
    'Precision': precision_score(y_test, y_pred_rf),
    'Recall': recall_score(y_test, y_pred_rf),
    'F1-Score': f1_score(y_test, y_pred_rf)
})

"""## Evaluation"""

result = pd.DataFrame(result)
result

"""**Evaluasi**

1. **Random Forest Classifier**
   - **Accuracy**: 93.61%
   - **Precision**: 96.99%
   - **Recall**: 89.68%
   - **F1-Score**: 93.19%

   **Analisis**: Dengan nilai yang didapatkan sangat baik sehingga model ini dapat membantu mengklasifikasikan attrition rate karyawan sehingga perusahaan dapat meminimalisir karyawan yang keluar.

Kesimpulan :
attrition rate dipengaruhi oleh Overtime dan maritalstatus

Save model
"""

joblib.dump(rf, 'model_jlib')